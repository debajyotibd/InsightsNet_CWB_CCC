
        IMS Open Corpus Workbench (CWB)
        Release 3.5 (PRE-RELEASE)

        Installation Guide


This file describes how to build and install the CWB from source code.  While 
binary packages for popular platforms are available from the CWB homepage

    https://cwb.sourceforge.io/

together with detailed installation instructions, compilation from source code
is strongly recommended for serious use because

 - the resulting binaries will be more compact and efficient than those
   in the pre-compiled packages (due to use of shared libraries),
 - the compiled code can be fully optimised for the platform and CPU it
   is running on, often with noticeable performance gains, and
 - there is less risk of compatibility issues. 

If you encounter a problem that you cannot solve with the information provided
in this installation guide or on the website, you can join the CWBdev mailing 
list

    http://devel.sslmit.unibo.it/mailman/listinfo/cwb

and ask your question there.

There are two companion files to this one with additional information related
to building/installing on specific platforms:

 - INSTALL-WIN for Windows, and
 - INSTALL-MACOS for MacOS (and its predecessor OS X) 
 
These files can be ignored if you are building on a generic Unix platform
(in particular Linux, but also Cygwin and WSL).


        QUICK INSTALLATION

On MacOS, the easiest way to install CWB is via the HomeBrew package manager.
Install HomeBrew from https://brew.sh/, then type

        brew install cwb3

to install the latest stable CWB release.  You can also install the 
cutting-edge code from the sf.net repository with

        brew install cwb3 --HEAD

Optionally, run a few basic tests to verify your CWB installation:

        brew test cwb3

See INSTALL-MACOS for further important information and other installation 
options.


On Linux, the easiest way to install CWB is with the included auto-install 
script, which will identify your Linux distribution, install necessary 
prerequisites via its package manager, then compile CWB and install it in the 
/usr/local tree. In the root directory of the source code distribution (where 
this INSTALL file is located), type

        sudo ./install-scripts/install-linux

then enter your password (you may need to login from an admin account first).  
For a personal installation without admin permissions and other options, read 
on below.


        PREREQUISITES

 - any modern Unix flavour (must be POSIX compatible)
 - GCC 3.3 or newer recommended (other ANSI C compilers might also work)
 - the ar and ranlib code archive utilities
 - GNU make or a compatible program
 - GNU bison & flex for updating automatically generated parsers
 - the pkg-config program
 - the ncurses library (or a similar terminal control library)
 - the PCRE library (version: PCRE2; see notes below)
 - the Glib library (see notes below)


        RECOMMENDED SOFTWARE (not essential)

 - the GNU Readline library for command-line editing (strongly recommended)
 - GNU install or a compatible program
 - Perl with pod2man script for rebuilding manual pages
 - GNU less pager for interactive display of query results in CQP 
   (a run-time dependency, strongly recommended)
 - gzip, bzip2 and other file compression tools in order to enable CWB to
   read and write compressed files (run-time dependency, strongly recommended)


        PREREQUISITE LIBRARIES ON LINUX: A WARNING

If you have installed the prerequisite libraries listed above from source,
then you will have all the files you need. However, if you are on Linux and
have installed the libraries via your distro's package manager, you may have 
to install *more than one package per library* to be able to build CWB 
properly. For instance, on Fedora, installing the package "ncurses" is not
sufficient to have the library available for building extra software - 
you also need the "ncurses-devel" package. The details of precisely what 
packages you need vary from distro to distro, but in many cases packages
for building software end in "-devel"  or "-dev".


        BASIC INSTALLATION PROCEDURE

[There are one-step setup scripts for some operating systems: see 
"AUTO-INSTALL SCRIPTS", below. You will also find specific instructions
for Windows and MacOS in files INSTALL-WIN and INSTALL-MACOS.
Otherwise, follow the instructions here.]

Edit "config.mk", selecting suitable platform and site configuration files
for your system .  You can also override individual settings manually there 
(available options are documented in "config.mk").  If you cannot find an
appropriate configuration, see WRITING YOUR OWN CONFIGURATION FILES below.

When working in a SVN sandbox, it is better to provide the desired configuration
settings in a separate file "local_config.mk" in the same directory, which will
automatically be loaded at the start of "config.mk".

Alternatively, platform and site settings can be overriden by adding the
flags "PLATFORM=### SITE=###" to the end of each of the make commands below.
This approach is particularly recommended if you are working from a SVN 
sandbox rather than a source code distribution.

Now, to compile the Corpus Library, CQP, CQPserver, and the
command-line utilities, type

        make clean
        make depend
        make all

If your default make program is not GNU make, you may have to type "gmake"
instead of "make" (the current Makefile system only works with GNU make and
fully compatible programs). To install the corpus library, all programs, and
the man pages, type

        make install

Note that you must have write permission in the installation directories in
order to do so (usually the "/usr/local" tree, but site configuration files 
may specify a different location with the PREFIX configuration variable).

You are now set to go.  If you are new to the CWB, you should read the 
"Corpus Encoding Manual" and "CQP Query Language Manual" available from
the CWB homepage.  You may also want to install pre-encoded sample corpora
for your first experiments.

If you want to make sure that all automatically generated files are up to
date, you should type

        make realclean

before starting the build process.  This will update makefile dependencies,
the generated bison/flex parsers and all man pages.  Note that this will only
work if the recommended software is installed (bison, flex and pod2man).


        AUTO-INSTALL SCRIPTS

There are now configuration/installation scripts for Unix and MacOS systems;
note that these are single-step ALTERNATIVES to following the instructions
above.

From the main CWB directory (the one containing this INSTALL file), run

        sudo ./install-scripts/install-linux

for a Linux install (or other Unix: SunOS, Cygwin; if no particular system
is detected, then the script will try a generic Unix install).

The install-linux script must be run as root (e.g. with sudo as shown above).
Here's what it does for you:

 - downloads and installs all prerequisite software packages,
   if you are using a package-management Linux version
 - sets the right configuration platform for compiling
 - compiles CWB from the source code
 - installs the CWB programs to the "usual" place on your system. 
 
After running these scripts, you are ready to start using CWB.

For recent MacOS releases, the install script is semi-automatic.
It requires either the HomeBrew or the MacPorts package manager to be
available. Use the package manager to install the prerequisite external 
libraries, then run

         sudo ./install-scripts/install-mac-osx

This script will check whether all prerequisites are satisfied and prompt
you to install missing libraries; then it will compile and install CWB.

However, it is recommended to either install CWB via the HomeBrew package
manager or follow the step-by-step instructions in the separate file
INSTALL-MACOS for a trouble-free install process.

These scripts both depend on an autoconfigure script to detect the platform.
You can alternatively use this script yourself to detect the correct default 
settings to use. Running the autoconfigure script as follows will print
out variables to append to "make" commands when you run them:

        ./install-scripts/config-basic

This removes the need to manually edit "config.mk", and allows you to take a
shortcut: you can go straight to compiling.

However, the autoconfigure/auto-install scripts may not work if you are
using Linux on an Opteron system. The autoconfigure script, and the 
auto-install script for MacOS, are likewise unable to distinguish 
most variants of Darwin; they will select a generic natively tuned 
configuration and focus on detecting whether prerequisite libraries are
provided by the HomeBrew or MacPorts package manager. Thus, in some cases, 
manually editing "config.mk" may be the better approach, so that you can 
select the most suitable platform and site configuration.


        WRITING YOUR OWN CONFIGURATION FILES

If you cannot find a suitable platform and site configuration files, or if 
you need to override some settings and expect to install future CWB releases
on the same system, you can write your own configuration files.

All configuration files can be found in the "config/platform/" and
"config/site/" subdirectories.  A listing of configuration variables with
short usage explanations can be found in the template files (aptly named
"template") in these directories, which provide good starting points for
your own configuration files.  In many cases, the easiest solution is to 
make a copy of a sufficiently similar configuration file and add your own
settings, or to inherit from this configuration with an appropriate 
"include" statement.  The "linux-*" and "darwin-*" configuration files in
the standard distribution are good examples of this strategy; each inherits
from the corresponding generic confuiguration ("linux"/"darwin") and tunes 
only those settings that need it.
 
It is recommended that you store your personal configuration files in a
separate directory outside the CWB tree, so you can easily re-use them with
future versions of the software.  You just have to modify the "include"
statements in "config.mk" to use absolute paths to your configuration files.
If your configuration files inherit from standard configurations, use include
paths of the form "$(TOP)/config/...".


        BUILDING BINARY RELEASES

For some platforms we support binary releases as self-contained packages that
can be unpacked on a target machine and be used there without any further 
installation.  In order to build such a binary release, you need to provide
suitable statically linked versions of the prerequisite libraries.  Then
select the appropriate "*-release" PLATFORM and SITE configurations and type

        make release

This will install the CWB locally in a subdirectory of "build/" and wrap it
in a ".tar.gz" archive for distribution.  The filename of this archive (which
is the same as the installation directory) indicates the CPU architecture and
operating system which the binary package has been compiled for.

For most use cases, installation of CWB via a package manager or compilation
from source is recommended.  We specifically support self-contained binary
releases for MacOS and Windows.  See "INSTALL-MACOS" and "INSTALL-WIN" for 
further information and detailed build instructions.

CWB's own Corpus Library, libcl, is included in the binary archive only as
a dynamic linking library or DLL ("libcl.so", "libcl.dll", or "libcl.dylib"),
which includes (references to) all prerequisite libraries.  CQP and the CWB
command-line tools are dynamically linked to this DLL using a relative path.
In order to compile C code against Corpus Library, it should be sufficient
to link it with the libcl DLL.  Suitable compiler flags can be obtained from
the "cwb-config" script included in the binary release.

Note that binrary releases do NOT include the statically linked library (libcl.a)
because it is useless without locally installed versions of the prerequisite
libraries (and users who get to this point are better off building from source).


        BUILDING SOURCE RELEASES

In order to "clean up" the source code tree for a standard source distribution
and create a ".tar.gz" archive, type

        make tarball

This will remove all automatically generated files, and then recreate the 
makefile dependencies, bison/flex parsers and manual pages, so that the CWB can
be compiled from source with a minimal set of prerequisites.

        BUILDING DEBIAN PACKAGES FOR LINUX

To build Debian source and binary packages for the CWB simply run

        make deb-release

For the build process to succeed a Debian (or Ubuntu) environment with the
following packages is needed: build-essential devscripts debhelper
The resulting packages will be placed in the build/ directory. The build process
should result in the following packages being created in the build directory:
  - a debian source package: cwb_*.debian.tar.xz cwb_*.orig.tar.gz
  - a deb binary package containing the CWB core software: cwb_*_amd64.deb
  - a deb binary package containing the files needed to develop software against the
    CWB like headers and static libraries: cwb-dev_*_amd64.deb
  - a ddeb package containing debug symbols: cwb-dbgsym_*_amd64.ddeb

The resulting binary packages can be manually installed via dpgk -i.


        BUILDING RPM PACKAGES FOR LINUX

In order to create a binary Linux distribution in RPM format, you need
a working RPM packaging workspace, the cwb RPM spec and the corresponding
sourcecode tarball.
The packaging workspace for Fedora, CentOS and RHEL can be prepared by installing
the "rpmdevtools" package and running the "rpmdev-setuptree" command.
The tarball can either be downloaded from the project homepage or built via
the instructions in this readme file.
Copy the spec file (packaging/cwb.spec) and the sourcecode tarball
(i.e. cwb-3.5-src.tar.gz) into the corresponding folders in your RPM packaging
workspace (usually ~/rpmbuild/SPECS and ~/rpmbuild/SOURCES), and run the following
command from the root of your packaging workspace:

        rpmbuild -ba SPECS/cwb.spec

The ready-made binary RPM packages will then be available in the appropriate
"RPMS/<arch>/<package>" subdirectory. The build process should result in several
packages being created:
  - a SRPM source package: SRPM/cwb-*.src.rpm
  - the cwb binary RPM, containing the binary distribution of the CWB CLI tools:
    cwb-*.x86_64.rpm
  - the cwb-devel RPM, containing all the files needed for developing software
    against the CWB (headers and static libs): cwb-devel-*.x86_64.rpm

The resulting binary packages can be installed via rpm -i.


        BUILDING PKGBUILDS FOR ARCH LINUX

Run makepkg inside a folder containing one of the PKGBUILDS from packaging/pkgbuild_*.
The resulting binary package can then be installed via makepkg -i or pacman -U.


        INSTALLING PREREQUISITE EXTERNAL LIBRARIES

The Glib and PCRE libraries are needed to compile CWB. If you are using a 
Linux flavour such as Debian, Fedora etc. then the easiest way to do this is
via your package repository, which should almost certainly include both. 
In fact, the auto-install scripts will actually check that you have got
the packages in question using the package-management tool. So if you are
using the auto-install scripts, you don't need to worry about it. 

Otherwise, PCRE and Glib are available to download from these addresses:

        http://www.pcre.org/
        http://www.gtk.org/download.html

Use the instructions included in the source code downloads to build the 
libraries.

For Glib, at least version 2 is required.

For PCRE, the new PCRE2 is required, at least version 10.0, but ideally 
the most recent available. You must use a copy of PCRE which has been 
compiled with Unicode (UTF-8) support and Unicode properties support. 
(You can find out whether this is the case using the pcre2test utility 
with the -C option.) We also strongly recommend using PCRE2 with JIT
compilation enabled (check with "pcre2test -C") in order to ensure good
performance. For complex regular expressions, this will make the lexicon
search A LOT faster (see http://sljit.sourceforge.net/regex_perf.html).

Most actively maintained platforms, including most Linux distributions,
distribute PCRE2 with Uni8code support and JIT enabled. 

For info on PCRE and Glib on Mac OS X, see INSTALL-MACOS.

The CWB build process makes the following assumptions:

 - that the location of header/library files for Glib can be discovered
   using the pkg-config utility (should be the case if you have used the
   standard installation procedure);

 - that the location of header/library files for PCR2 can be discovered
   using the pcre2-config utility (which should also be the case if you
   have used the standard installation procedure).

If you want to use your own copy of Glib or PCRE2 instead of the version
provided by a standard package, set up your search path so that the 
appropriate pkg-config or pcre2-config binary is found first.

If you cannot provide installation details through pkg-config and
pcre2-config, quite a bit of tinkering with the Makefile includes will be
needed to make things work.

