.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB::Encoder 3pm"
.TH CWB::Encoder 3pm "2023-06-22" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  CWB::Encoder \- Perl tools for encoding and indexing CWB corpora
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use CWB::Encoder;
\&
\&  
\&  $bnc = new CWB::Indexer "BNC";
\&  $bnc = new CWB::Indexer "/path/to/registry:BNC";
\&
\&  $bnc\->group("corpora");     # optional: group and access
\&  $bnc\->perm("640");          # permissions for newly created files
\&
\&  $bnc\->memory(400);          # use up to 400 MB of RAM (default: 75)
\&  $bnc\->validate(0);          # disable validation for faster indexing
\&  $bnc\->verbose(1);           # print some progress information
\&  $bnc\->debug(1);             # enable debugging output
\&
\&  $bnc\->make("word", "pos");  # build index & compress
\&  $bnc\->makeall;              # process all p\-attributes
\&
\&  
\&  
\&  $bnc = new CWB::Encoder "BNC";
\&
\&  $bnc\->registry("/path/to/registry");  # will try to guess otherwise
\&  $bnc\->dir("/path/to/data/directory"); # directory for corpus data files
\&  $bnc\->overwrite(1);         # may overwrite existing files / directories
\&  
\&  $bnc\->longname("British National Corpus"); # optional
\&  $bnc\->info("Line1.\enLine2.\en...");    # optional multi\-line info text
\&  $bnc\->charset("latin1");    # defaults to latin1
\&  $bnc\->language("en");       # defaults to ??
\&  
\&  $bnc\->group("corpora");     # optional: group and access permissions
\&  $bnc\->perm("640");          # for newly created files & directories
\&
\&  $bnc\->p_attributes("word"); # declare postional atts (no default!)
\&  $bnc\->p_attributes(qw<pos lemma>);  # may be called repeatedly
\&  $bnc\->null_attributes("teiHeader"); # declare null atts (ignores XML tags)
\&  $bnc\->auto_null(1);         # ignore all undeclared XML tags
\&  $bnc\->s_attributes("s");    # s\-attributes in cwb\-encode syntax
\&  $bnc\->s_attributes(qw<div0* div1*>);# * = store annotations (\-V)
\&  $bnc\->s_attributes("bncDoc:0+id");  # recursion & XML attributes
\&
\&  $bnc\->decode_entities(0);        # don\*(Aqt decode XML entities (with \-x flag)
\&  $bnc\->undef_symbol("_\|_UNDEF_\|_"); # mark missing values like cwb\-encode
\&
\&  $bnc\->memory(400);          # use up to 400 MB of RAM (default: 75)
\&  $bnc\->validate(0);          # disable validation for faster indexing
\&  $bnc\->encode_options("\-C"); # pass arbitrary options to cwb\-encode
\&
\&  $bnc\->verbose(1);           # print some progress information
\&  $bnc\->debug(1);             # enable debugging output
\&
\&  $bnc\->encode(@files);       # encoding, indexing, and compression
\&
\&  $pipe = $bnc\->encode_pipe;  # can also feed input text from Perl script
\&  while (...) {
\&    print $pipe "$line\en";
\&  }
\&  $bnc\->close_pipe;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package contains modules for the automatic encoding and indexing
of \s-1CWB\s0 corpora.
.PP
\&\fBCWB::Indexer\fR builds indices for some or all positional attributes
of an existing corpus (using the \fBcwb-makeall\fR tool). In addition,
these attributes are automatically compressed (using the
\&\fBcwb-huffcode\fR and \fBcwb-compress-rdx\fR tools). Compression and
indexing is interleaved to minimise the required amount of temporary
disk space, and a \fBmake\fR\-like system ensures that old index files are
automatically updated.
.PP
\&\fBCWB::Encoder\fR automates all steps necessary to encode a \s-1CWB\s0 corpus
(which includes cleaning up old files, running \fBcwb-encode\fR, editing
the registry entry, indexing & compressing positional attributes, and
setting access permissions). Both modules can be set up with a few
simple method calls. Full descriptions are given separately in the
following sections.
.SH "CWB::Indexer METHODS"
.IX Header "CWB::Indexer METHODS"
.ie n .IP "$idx = new CWB::Indexer $corpus;" 4
.el .IP "\f(CW$idx\fR = new CWB::Indexer \f(CW$corpus\fR;" 4
.IX Item "$idx = new CWB::Indexer $corpus;"
.PD 0
.ie n .IP "$idx = new CWB::Indexer ""$registry_path:$corpus"";" 4
.el .IP "\f(CW$idx\fR = new CWB::Indexer ``$registry_path:$corpus'';" 4
.IX Item "$idx = new CWB::Indexer $registry_path:$corpus;"
.PD
Create a new \fBCWB::Indexer\fR object for the specified corpus. If
\&\fI\f(CI$corpus\fI\fR is not registered in the default registry path (the built-in 
default or the \f(CW\*(C`CORPUS_REGISTRY\*(C'\fR environment variable), the registry
directory has to be specified explicitly, separated from the corpus name
by a \f(CW\*(C`:\*(C'\fR character. \fI\f(CI$registry_path\fI\fR may contain multiple directories
separated by \f(CW\*(C`:\*(C'\fR characters.
.ie n .IP "$idx\->group($group);" 4
.el .IP "\f(CW$idx\fR\->group($group);" 4
.IX Item "$idx->group($group);"
.PD 0
.ie n .IP "$idx\->perm($permission);" 4
.el .IP "\f(CW$idx\fR\->perm($permission);" 4
.IX Item "$idx->perm($permission);"
.PD
Optional group membership and access permissions for newly created
files (otherwise, neither \fBchgrp\fR nor \fBchmod\fR will be called). Note
that \fI\f(CI$permission\fI\fR must be a string rather than an octal number (as
for the built-in \fBchmod\fR function). Indexing will fail if the
specified group and/or permissions cannot be set.
.ie n .IP "$idx\->memory($mbytes);" 4
.el .IP "\f(CW$idx\fR\->memory($mbytes);" 4
.IX Item "$idx->memory($mbytes);"
Set approximate memory limit for \fBcwb-makeall\fR command, in MBytes.
The memory limit defaults to 75 \s-1MB,\s0 which is a reasonable value for
systems with at least 128 \s-1MB\s0 of \s-1RAM.\s0
.ie n .IP "$idx\->\fBvalidate\fR\|(0);" 4
.el .IP "\f(CW$idx\fR\->\fBvalidate\fR\|(0);" 4
.IX Item "$idx->validate;"
Turn off validation of index and compressed files, which may give 
substantial speed improvements for larger corpora.
.ie n .IP "$idx\->\fBverbose\fR\|(1);" 4
.el .IP "\f(CW$idx\fR\->\fBverbose\fR\|(1);" 4
.IX Item "$idx->verbose;"
Display some progress messages (on \s-1STDOUT\s0).
.ie n .IP "$idx\->\fBdebug\fR\|(1);" 4
.el .IP "\f(CW$idx\fR\->\fBdebug\fR\|(1);" 4
.IX Item "$idx->debug;"
Activate debugging output (on \s-1STDERR\s0).
.ie n .IP "$idx\->make($att1, $att2, ...);" 4
.el .IP "\f(CW$idx\fR\->make($att1, \f(CW$att2\fR, ...);" 4
.IX Item "$idx->make($att1, $att2, ...);"
Process one or more positional attributes. An index is built for each
attribute and the data files are compressed. Missing files are
re-created (if possible) and old files are updated automatically.
.ie n .IP "$idx\->makeall;" 4
.el .IP "\f(CW$idx\fR\->makeall;" 4
.IX Item "$idx->makeall;"
Process all positional attributes of the corpus.
.SH "CWB::Encoder METHODS"
.IX Header "CWB::Encoder METHODS"
.ie n .IP "$enc = new CWB::Encoder $corpus;" 4
.el .IP "\f(CW$enc\fR = new CWB::Encoder \f(CW$corpus\fR;" 4
.IX Item "$enc = new CWB::Encoder $corpus;"
Create a new \fBCWB::Encoder\fR object for the specified corpus. Note
that the registry directory cannot be passed directly to the
constructor (use the \fBregistry\fR method instead).
.ie n .IP "$enc\->name($corpus);" 4
.el .IP "\f(CW$enc\fR\->name($corpus);" 4
.IX Item "$enc->name($corpus);"
Change the \s-1CWB\s0 name of a corpus after the encoder object \fI\f(CI$enc\fI\fR has been created.
Has to be used if the constructor was called without arguments.
.ie n .IP "$enc\->longname($descriptive_name);" 4
.el .IP "\f(CW$enc\fR\->longname($descriptive_name);" 4
.IX Item "$enc->longname($descriptive_name);"
Optional long, descriptive name for a corpus (single line).
.ie n .IP "$enc\->info($multiline_text);" 4
.el .IP "\f(CW$enc\fR\->info($multiline_text);" 4
.IX Item "$enc->info($multiline_text);"
Multi-line text that will be written to the \f(CW\*(C`.info\*(C'\fR file of the
corpus.
.ie n .IP "$enc\->charset($code);" 4
.el .IP "\f(CW$enc\fR\->charset($code);" 4
.IX Item "$enc->charset($code);"
Set corpus character set (as a corpus property in the registry entry).
In \s-1CWB\s0 release 3.0, only \f(CW\*(C`latin1\*(C'\fR is fully supported, but character sets
\&\f(CW\*(C`latin2\*(C'\fR, ..., \f(CW\*(C`latin9\*(C'\fR and \f(CW\*(C`utf8\*(C'\fR can also be declared.
In \s-1CWB\s0 release 3.5, the following character sets are supported:
\&\f(CW\*(C`ascii\*(C'\fR, \f(CW\*(C`latin1\*(C'\fR, ..., \f(CW\*(C`latin9\*(C'\fR, \f(CW\*(C`arabic\*(C'\fR, \f(CW\*(C`greek\*(C'\fR, \f(CW\*(C`hebrew\*(C'\fR and \f(CW\*(C`utf8\*(C'\fR.
Any other \fI\f(CI$code\fI\fR will raise a warning.
.ie n .IP "$enc\->language($code);" 4
.el .IP "\f(CW$enc\fR\->language($code);" 4
.IX Item "$enc->language($code);"
Set corpus language (as an informational corpus property in the
registry entry). Use of a two-letter \s-1ISO\s0 code (\f(CW\*(C`de\*(C'\fR, \f(CW\*(C`en\*(C'\fR, \f(CW\*(C`fr\*(C'\fR,
\&...) is recommended, and any other formats will raise a warning.
.ie n .IP "$enc\->registry($registry_dir);" 4
.el .IP "\f(CW$enc\fR\->registry($registry_dir);" 4
.IX Item "$enc->registry($registry_dir);"
Specify registry directory \fI\f(CI$registry_dir\fI\fR, which must be a single
directory rather than a path. If the registry directory is not set
explicitly, \fBCWB::Encoder\fR attempts to determine the standard
registry directory, and will fail if there is no unique match
(e.g. when the \f(CW\*(C`CORPUS_REGISTRY\*(C'\fR environment variable specifies
multiple directories).
.ie n .IP "$enc\->dir($data_dir);" 4
.el .IP "\f(CW$enc\fR\->dir($data_dir);" 4
.IX Item "$enc->dir($data_dir);"
Specify directory \fI\f(CI$data_dir\fI\fR for corpus data files. The directory is
automatically created if it does not exist.
.ie n .IP "$enc\->p_attributes($att1, $att2, ...);" 4
.el .IP "\f(CW$enc\fR\->p_attributes($att1, \f(CW$att2\fR, ...);" 4
.IX Item "$enc->p_attributes($att1, $att2, ...);"
Declare one or more \fBpositional attributes\fR. This method can be
called repeatedly with additional attributes. Note that \fIall\fR 
positional attributes, including \f(CW\*(C`word\*(C'\fR, have to be declared
explicitly.
.ie n .IP "$enc\->s_attributes($att1, $att2, ...);" 4
.el .IP "\f(CW$enc\fR\->s_attributes($att1, \f(CW$att2\fR, ...);" 4
.IX Item "$enc->s_attributes($att1, $att2, ...);"
Declare one or more \fBstructural attributes\fR. \fI\f(CI$att1\fI\fR etc. are either
simple attribute names or complex declarations using the syntax of the
\&\f(CW\*(C`\-S\*(C'\fR and \f(CW\*(C`\-V\*(C'\fR flags in \fBcwb-encode\fR. See the \fI\s-1CWB\s0 Corpus Encoding
Tutorial\fR for details on the attribute declaration syntax for nesting
depth and \s-1XML\s0 tag attributes. By default, structural attributes are
encoded without annotation strings (\f(CW\*(C`\-S\*(C'\fR flag). In order to store
annotations (\f(CW\*(C`\-V\*(C'\fR flag), append an asterisk (\f(CW\*(C`*\*(C'\fR) to the attribute
name or declaration. The \fI\s-1CWB\s0 Corpus Encoding Tutorial\fR explains when
to use \f(CW\*(C`\-S\*(C'\fR and when to use \f(CW\*(C`\-V\*(C'\fR. The \fBs_attributes\fR method can
be called repeatedly to add further attributes.
.ie n .IP "$enc\->null_attributes($att1, $att2, ...);" 4
.el .IP "\f(CW$enc\fR\->null_attributes($att1, \f(CW$att2\fR, ...);" 4
.IX Item "$enc->null_attributes($att1, $att2, ...);"
Declare one or more \fBnull attributes\fR.  \s-1XML\s0 start and end tags
with these names will be ignored (and not inserted as \f(CW\*(C`word\*(C'\fR
tokens). This method can be called repeatedly.
.ie n .IP "$enc\->\fBauto_null\fR\|(1);" 4
.el .IP "\f(CW$enc\fR\->\fBauto_null\fR\|(1);" 4
.IX Item "$enc->auto_null;"
Ignore \s-1XML\s0 tags that haven't been declared as s\-attributes rather than
inserting them as ordinary tokens. Such \s-1XML\s0 tags are automatically 
declared as null attributes.
.ie n .IP "$enc\->group($group);" 4
.el .IP "\f(CW$enc\fR\->group($group);" 4
.IX Item "$enc->group($group);"
.PD 0
.ie n .IP "$enc\->perm($permission);" 4
.el .IP "\f(CW$enc\fR\->perm($permission);" 4
.IX Item "$enc->perm($permission);"
.PD
Optional group membership and access permissions for newly created
files (otherwise, neither \fBchgrp\fR nor \fBchmod\fR will be called). Note
that \fI\f(CI$permission\fI\fR must be a string rather than an octal number (as
for the built-in \fBchmod\fR function). Encoding will fail if the
specified group and/or permissions cannot be set. If the data
directory has to be created, its access permissions and group
membership are set accordingly.
.ie n .IP "$enc\->\fBoverwrite\fR\|(1);" 4
.el .IP "\f(CW$enc\fR\->\fBoverwrite\fR\|(1);" 4
.IX Item "$enc->overwrite;"
Allow \fBCWB::Encoder\fR to overwrite existing files. This is required
when either the registry entry or the data directory exists already.
When overwriting is enabled, the registry entry and all files in the 
data directory are deleted before encoding starts.
.ie n .IP "$enc\->memory($mbytes);" 4
.el .IP "\f(CW$enc\fR\->memory($mbytes);" 4
.IX Item "$enc->memory($mbytes);"
Set approximate memory limit for \fBcwb-makeall\fR command, in MBytes.
The memory limit defaults to 75 \s-1MB,\s0 which is a reasonable value for
systems with at least 128 \s-1MB\s0 of \s-1RAM.\s0 The memory setting is only used
when building indices for positional attributes, not during the
initial encoding process.
.ie n .IP "$enc\->\fBvalidate\fR\|(0);" 4
.el .IP "\f(CW$enc\fR\->\fBvalidate\fR\|(0);" 4
.IX Item "$enc->validate;"
Turn off validation of index and compressed files, which may give 
substantial speed improvements for larger corpora.
.ie n .IP "$enc\->\fBdecode_entities\fR\|(0);" 4
.el .IP "\f(CW$enc\fR\->\fBdecode_entities\fR\|(0);" 4
.IX Item "$enc->decode_entities;"
Whether \fBcwb-encode\fR is allowed to decode \s-1XML\s0 entities and skip \s-1XML\s0 
comments (with the \f(CW\*(C`\-x\*(C'\fR option).  Set this option to false if you
want an HTML-compatible encoding of the \s-1CWB\s0 corpus that does not need
to be converted before display in a Web browser.
.ie n .IP "$enc\->undef_symbol(""_\|_UNDEF_\|_"");" 4
.el .IP "\f(CW$enc\fR\->undef_symbol(``_\|_UNDEF_\|_'');" 4
.IX Item "$enc->undef_symbol(__UNDEF__);"
Symbol inserted for missing values of positional attributes (either
because there are too few columns in the input or because attribute
values are explicit empty strings).  By default, no special symbol
is inserted (i.e. missing values are encoded as empty strings \f(CW""\fR).
Use the command shown above to mimic the standard behaviour of
\&\fBcwb-encode\fR.
.ie n .IP "$enc\->encode_options($string, ...);" 4
.el .IP "\f(CW$enc\fR\->encode_options($string, ...);" 4
.IX Item "$enc->encode_options($string, ...);"
This options allows users to pass arbitrary further command-line
options to the \fBcwb-encode\fR program. Use with caution!
.Sp
Note that each option (and option argument) must be passed as a 
separate argument to \fBencode_options\fR because they will not be
parsed by the shell (and so additional quotes are not needed).
.ie n .IP "$enc\->\fBverbose\fR\|(1);" 4
.el .IP "\f(CW$enc\fR\->\fBverbose\fR\|(1);" 4
.IX Item "$enc->verbose;"
Print some progress information (on \s-1STDOUT\s0).
.ie n .IP "$enc\->\fBdebug\fR\|(1);" 4
.el .IP "\f(CW$enc\fR\->\fBdebug\fR\|(1);" 4
.IX Item "$enc->debug;"
Activate debugging output (on \s-1STDERR\s0).
.ie n .IP "$enc\->encode(@files_or_directories);" 4
.el .IP "\f(CW$enc\fR\->encode(@files_or_directories);" 4
.IX Item "$enc->encode(@files_or_directories);"
Encode one or more input files as a \s-1CWB\s0 corpus, using the parameter
settings of the \fI\f(CI$enc\fI\fR object. The \fBencode\fR method performs the full
encoding cycle, including indexing, compression, and setting access
permissions. All input files must be specified at once as subsequent
\&\fBencode\fR calls would overwrite the new corpus. Input files may be
compressed with GZip (\f(CW\*(C`.gz\*(C'\fR), as supported by \fBcwb-encode\fR.
.Sp
The argument list may also contain directories.  In this case, all files
with extensions \f(CW\*(C`.vrt\*(C'\fR or \f(CW\*(C`.vrt.gz\*(C'\fR in those directories will automatically
be added to the corpus.  Note that no recursive search of subdirectories is
performed: only files located in the specified directories will be included.
.ie n .IP "$pipe = $enc\->encode_pipe;" 4
.el .IP "\f(CW$pipe\fR = \f(CW$enc\fR\->encode_pipe;" 4
.IX Item "$pipe = $enc->encode_pipe;"
Open a pipe to the \fBcwb-encode\fR command and return its file handle.
This allows some pre-processing of the input by the Perl script
(perhaps reading from another pipe), which should \fBprint\fR to \fI\f(CI$pipe\fI\fR
in one-word-per-line format. Note that the file handle \fI\f(CI$pipe\fI\fR must
not be \fBclose\fRd by the Perl script (see the \fBclose_pipe\fR method
below).
.ie n .IP "$enc\->close_pipe;" 4
.el .IP "\f(CW$enc\fR\->close_pipe;" 4
.IX Item "$enc->close_pipe;"
After opening an encode pipe with the \fBencode_pipe\fR method and
\&\fBprint\fRing the input text to this pipe, the \fBclose_pipe\fR method has
to be called to \fBclose\fR the pipe and trigger the post-encoding steps
(indexing, compression, and access permissions). When the
\&\fBclose_pipe\fR method returns, the corpus has been encoded
successfully.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2002\-2022 Stephanie Evert [https://purl.org/stephanie.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
