.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB::CEQL::String 3pm"
.TH CWB::CEQL::String 3pm "2023-06-22" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
CWB::CEQL::String \- Typed strings with annotations (return values of DPP rules)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use CWB::CEQL::String;
\&
\&  $op = new CWB::CEQL::String ">=";
\&  $op\->type("Operator");
\&  ## SAME AS: $op = new CWB::CEQL::String ">=", "Operator";
\&
\&  print "42 $op 0\en"; # prints "42 >= 0"
\&  if ($op\->type eq "Operator") { ... }
\&
\&  $string = new CWB::CEQL::String "my string", "String";
\&  $string .= " is beautiful";       # changes string, but not its type
\&  $string\->value("another string"); # $string = "..."; would replace with ordinary string
\&  print $string\->value, "\en";       # access string value explicitly
\&
\&  $string\->attribute("charset", "ascii"); # declare and/or set user\-defined attribute
\&  if ($string\->attribute("charset") eq "utf8") { ... }
\&
\&  $new_string = $string\->copy;      # $new_string = $string; would point to same object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements a class of typed, string-like objects that are used as return values of \s-1DPP\s0 grammar rules (e.g. to distinguish between different categories of symbols (IDs, operators, etc.).
.PP
In appropriate contexts, a \fBCWB::CEQL::String\fR object behaves like an ordinary string, whose type can be determined with the \fBtype\fR method.  Optional further annotations can be added and retrieved with the \fBattribute\fR method.
.PP
\&\fBImportant note:\fR automatic conversion of \fBCWB::CEQL::String\fR objects to a number in numerical context usually does not work.  Use the \fBvalue\fR method explicitly in this case.
.SH "METHODS"
.IX Header "METHODS"
.IP "\fI\f(CI$obj\fI\fR = \fBnew\fR CWB::CEQL::String \fI\f(CI$string\fI\fR [, \fI\f(CI$type\fI\fR];" 4
.IX Item "$obj = new CWB::CEQL::String $string [, $type];"
Returns new \f(CW\*(C`CWB::CEQL::String\*(C'\fR object \fI\f(CI$obj\fI\fR holding string value
\&\fI\f(CI$string\fI\fR.  If \fI\f(CI$type\fI\fR is given, \fI\f(CI$obj\fI\fR is assigned to the specified type.
.IP "\fI\f(CI$string\fI\fR = \fI\f(CI$obj\fI\fR\->\fBvalue\fR;" 4
.IX Item "$string = $obj->value;"
.PD 0
.ie n .IP "\fI\f(CI$string\fI\fR = ""\fI\f(CI$obj\fI\fR"";" 4
.el .IP "\fI\f(CI$string\fI\fR = ``\fI\f(CI$obj\fI\fR'';" 4
.IX Item "$string = ""$obj"";"
.PD
Return string value of \fBCWB::CEQL::String\fR object \fI\f(CI$obj\fI\fR.  Overloading
ensures that this value is accessed automatically if \fI\f(CI$obj\fI\fR is used in a
string context (such as interpolation).
.IP "\fI\f(CI$obj\fI\fR\->\fBvalue\fR(\fI\f(CI$string\fI\fR);" 4
.IX Item "$obj->value($string);"
Change string value of \fI\f(CI$obj\fI\fR.  Note that a simple assignment \f(CW\*(C`$obj =
$string\*(C'\fR would overwrite \fI\f(CI$obj\fI\fR with a plain string.
.IP "\fI\f(CI$obj\fI\fR\->\fBappend\fR(\fI\f(CI$string\fI\fR);" 4
.IX Item "$obj->append($string);"
.PD 0
.IP "\fI\f(CI$obj\fI\fR .= \fI\f(CI$string\fI\fR;" 4
.IX Item "$obj .= $string;"
.PD
Append \fI\f(CI$string\fI\fR to string value of \fI\f(CI$obj\fI\fR.
.IP "\fI\f(CI$obj\fI\fR\->\fBtype\fR(\fI\f(CI$type\fI\fR);" 4
.IX Item "$obj->type($type);"
Set or change type of \fI\f(CI$obj\fI\fR (returns previous value).
.IP "\fI\f(CI$type\fI\fR = \fI\f(CI$obj\fI\fR\->\fBtype\fR;" 4
.IX Item "$type = $obj->type;"
.PD 0
.IP "\fI\f(CI$type\fI\fR = ~\fI\f(CI$obj\fI\fR;" 4
.IX Item "$type = ~$obj;"
.PD
Return type of the \fBCWB::CEQL::String\fR object.  The returned value may be \fBundef\fR if
\&\fI\f(CI$obj\fI\fR hasn't been assigned to a type.
.IP "\fI\f(CI$obj\fI\fR\->\fBattribute\fR(\fI\f(CI$name\fI\fR, \fI\f(CI$value\fI\fR);" 4
.IX Item "$obj->attribute($name, $value);"
Define new user attribute \fI\f(CI$name\fI\fR with value \fI\f(CI$value\fI\fR, or change value
of existing attribute.
.IP "\fI\f(CI$value\fI\fR = \fI\f(CI$obj\fI\fR\->\fBattribute\fR(\fI\f(CI$name\fI\fR);" 4
.IX Item "$value = $obj->attribute($name);"
Returns value of user attribute \fI\f(CI$name\fI\fR.  It is an error to read an attribute
that has not been defined before.
.IP "\fI\f(CI$new_obj\fI\fR = \fI\f(CI$obj\fI\fR\->\fBcopy\fR;" 4
.IX Item "$new_obj = $obj->copy;"
Returns a copy of the \fBCWB::CEQL::String\fR object \fI\f(CI$obj\fI\fR.  Note that after a
simple assignment \f(CW\*(C`$new_obj = $obj\*(C'\fR, the two variables would contain the same
object (so changing one of them would also modify the other).
.Sp
The \fBcopy\fR method makes a flat copy of the internal hash of user attributes.
Therefore, complex data structures used as attribute values will be shared
between \fI\f(CI$new_obj\fI\fR and \fI\f(CI$obj\fI\fR.
.IP "\fI\f(CI$result\fI\fR = \fI\f(CI$obj\fI\fR\->\fBcmp\fR(\fI\f(CI$obj2\fI\fR [, \fI\f(CI$reverse\fI\fR]);" 4
.IX Item "$result = $obj->cmp($obj2 [, $reverse]);"
The \fBcmp\fR method implements string comparison operators for
\&\fBCWB::CEQL::String\fR objects.  The second operand \fI\f(CI$obj2\fI\fR must either be a
plain string or another \fBCWB::CEQL::String\fR object.  If the optional argument
\&\fI\f(CI$reverse\fI\fR is \s-1TRUE,\s0 the comparison is reversed (so a string as first operand
can be compared with a \fBCWB::CEQL::String\fR object).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2005\-2022 Stephanie Evert [https://purl.org/stephanie.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
