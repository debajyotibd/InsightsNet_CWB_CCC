.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB-ALIGN-EXPORT 1p"
.TH CWB-ALIGN-EXPORT 1p "2023-06-22" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cwb\-align\-export \- Export existing sentence alignment from a CWB corpus
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  cwb\-align\-export [options] <SOURCE> <TARGET> <grid> <keyspec>
\&
\&  <SOURCE>    CWB name of source corpus
\&  <TARGET>    CWB name of target corpus
\&  <grid>      s\-attribute containing the alignment grid (usually "s")
\&  <keyspec>   pattern used to construct unique IDs for grid regions
.Ve
.PP
Options:
.PP
.Vb 6
\&  \-r <dir>, \-\-registry=<dir>    use registry directory <dir>
\&  \-o <file>, \-\-output=<file>    write output to <file>
\&  \-nh, \-\-no\-header              write alignment file without header
\&  \-f, \-\-force                   skip alignment beads with errors rather than stopping
\&  \-v, \-\-verbose                 show progress messages during processing
\&  \-h, \-\-help                    display short help page
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script exports an encoded sentence-level alignment between two \s-1CWB\s0 corpora (\fI\s-1SOURCE\s0\fR and \fI\s-1TARGET\s0\fR) as a text file compatible with \fBcwb-align-import\fR.  In the output, alignment beads are specified by (sets of) unique sentence IDs in the source and target corpus.  Unique IDs are computed from one or more s\-attributes according to the pattern \fIkeyspec\fR.  Alignments at other granularities (such as paragraph or clause) are also supported; the corresponding s\-attribute is specified by the command-line argument \fIgrid\fR.
.PP
It is recommended to read the cwb-align-import manpage first, in order to get a better understanding of the export file format and its correspondence to a \s-1CWB\s0 alignment attribute.  An illustrative example can be found in the \fI\s-1CWB\s0 Corpus Encoding Tutorial\fR.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "\fI\s-1SOURCE\s0\fR" 4
.IX Item "SOURCE"
\&\s-1CWB\s0 corpus \s-1ID\s0 of the source language corpus.
.IP "\fI\s-1TARGET\s0\fR" 4
.IX Item "TARGET"
\&\s-1CWB\s0 corpus \s-1ID\s0 of the target language corpus.
.IP "\fIgrid\fR" 4
.IX Item "grid"
\&\s-1CWB\s0 attribute representing the alignment grid, i.e. each alignment bead links \fIn\fR consecutive grid regions in the source language to \fIm\fR consecutive grid regions in the target language.  It is an error if the start or end of an alignment bead region doesn't match a corresponding grid boundary.
.Sp
For the most common case of sentence alignment, \fIgrid\fR will usually be set to \f(CW\*(C`s\*(C'\fR.  Note that the same grid attribute is used for both source and target language corpus.
.IP "\fIkeyspec\fR" 4
.IX Item "keyspec"
Pattern used to construct unique sentence IDs (both in the source and target corpus).  If sentences are directly annotated with IDs, say in the s\-attribute \f(CW\*(C`s_id\*(C'\fR, you can simply specify \f(CW\*(C`{s_id}\*(C'\fR or \f(CW\*(C`{id}\*(C'\fR for short (the name of the grid attribute is automatically prepended).  Note the curly braces around the attribute name!
.Sp
In more complex situations, \fIkeyspec\fR is an arbitrary character string that interpolates s\-attributes enclosed in curly braces.  For example, if paragraphs and sentences are numbered (s\-attributes \f(CW\*(C`p_num\*(C'\fR and \f(CW\*(C`s_num\*(C'\fR), you can construct IDs of the form \f(CW\*(C`id_p4_s2\*(C'\fR (second sentence in fourth paragraph) with the pattern \f(CW\*(C`id_p{p_num}_s{s_num}\*(C'\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-registry=\fIdir\fR, \-r \fIdir\fR" 4
.IX Item "--registry=dir, -r dir"
Locate corpora in \s-1CWB\s0 registry directory \fIdir\fR, overriding the default directory and the environment variable \f(CW\*(C`CORPUS_REGISTRY\*(C'\fR.
.IP "\-\-output=\fIfile\fR, \-o \fIfile\fR" 4
.IX Item "--output=file, -o file"
Write export data to \fIfile\fR rather than standard output.  Files with extension \f(CW\*(C`.gz\*(C'\fR or \f(CW\*(C`.bz2\*(C'\fR are compressed automatically.
.IP "\-\-no\-header, \-nh" 4
.IX Item "--no-header, -nh"
Write alignment file without the optional header line (see \*(L"\s-1EXPORT FILE FORMAT\*(R"\s0 below).
.IP "\-\-force, \-f" 4
.IX Item "--force, -f"
Ignore errors and continue exporting.  If the start or end point of an alignment bead doesn't match grid boundaries, the bead will be skipped with an error message.
.IP "\-\-verbose, \-v" 4
.IX Item "--verbose, -v"
Verbose mode (shows progress messages during processing).
.IP "\-\-help, \-h" 4
.IX Item "--help, -h"
Show usage and options summary.
.SH "EXPORT FILE FORMAT"
.IX Header "EXPORT FILE FORMAT"
The exported alignment file starts with an optional header line specifying the \s-1CWB\s0 names of source and target corpus, the s\-attribute containing sentence regions (or other regions used as an alignment grid), and the key pattern for constructing unique sentence IDs.  The four items are separated by \s-1TAB\s0 characters.  Specify \f(CW\*(C`\-\-no\-header\*(C'\fR) to omit the header line from the export file.
.PP
Each of the remaining lines in the export file corresponds to a single alignment bead.  It consists of the \s-1ID\s0 of a sentence in the source corpus (or multiple IDs separated by blanks), followed by a \s-1TAB\s0 character and the \s-1ID\s0 of the aligned sentence in the target corpus (or multiple IDs separated by blanks).
.PP
See the cwb-align-import manpage for a more detailed description of the file format and the specification of unique IDs.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2007\-2022 Stephanie Evert [https://purl.org/stephanie.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
