.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB-SPLIT-VRT 1p"
.TH CWB-SPLIT-VRT 1p "2023-06-22" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cwb\-split\-vrt \- Split CWB input data (.vrt) into multiple parts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  cwb\-split\-vrt [options] <basename> [file1.vrt.gz file2.vrt.gz ...]
\&
\&    \-n <size>   maximum size (# tokens) of each part [default: \-n CL_MAX_CORPUS_SIZE]
\&    \-by <tag>   XML tag delimiting independent units for split [default: \-by text]
\&    \-v          show progress information
\&    \-h          display this help page
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
More and more corpora are becoming available that exceed the maximum \s-1CWB\s0 corpus size of 2.1 billion tokens. In order to index them with \s-1CWB,\s0 they have to be split into smaller parts. This script helps to automate the splitting procedure. It reads an arbitrary number of \s-1CWB\s0 input files \f(CW\*(C`.vrt\*(C'\fR format and divides the complete data into blocks of less than 2.1 billion tokens each (or a lower limit specified by the user). The script also ensures that individual texts in the corpus (indicated by the \s-1XML\s0 tag \f(CW\*(C`<text>\*(C'\fR or another tag specified by the user) are not broken across multiple parts.
.PP
Input files with extension \f(CW\*(C`.gz\*(C'\fR, \f(CW\*(C`.bz2\*(C'\fR or \f(CW\*(C`.xz\*(C'\fR are automatically decompressed. Output files are always GZip-compressed and are named \f(CW\*(C`\f(CIbasename\f(CW\-1.vrt.gz\*(C'\fR, \f(CW\*(C`\f(CIbasename\f(CW\-2.vrt.gz\*(C'\fR, etc.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-size=\fIlimit\fR, \-n \fIlimit\fR" 4
.IX Item "--size=limit, -n limit"
Split corpus into parts of up to \fIlimit\fR tokens each.  The default \s-1CL_MAX_CORPUS_SIZE\s0 = 2^32\-1 is guaranteed to work for 64\-bit \s-1CWB 3.5,\s0 but older \s-1CWB\s0 releases may have a slightly lower limit.  It is recommended to set this option to \f(CW\*(C`\-n 2147000000\*(C'\fR or lower for best compatibility.
.IP "\-\-by=\fItag\fR, \-S \fItag\fR" 4
.IX Item "--by=tag, -S tag"
\&\fBcwb-split-vrt\fR takes care not to break textual units in the corpus \- indicated by \s-1XML\s0 elements named \fItag\fR \- across multiple parts. Following \fBCQPweb\fR conventions, the default setting is \f(CW\*(C`\-by text\*(C'\fR, i.e. individual corpus texts are delimited by \s-1XML\s0 tags \f(CW\*(C`<text>\*(C'\fR and \f(CW\*(C`</text>\*(C'\fR.  See \*(L"\s-1DETAILS\*(R"\s0 below.
.IP "\-\-verbose, \-v" 4
.IX Item "--verbose, -v"
Show progress information during splitting procedure (recommended since this will typically take a very long time).
.IP "\-\-help, \-h" 4
.IX Item "--help, -h"
Display short help page.
.SH "DETAILS"
.IX Header "DETAILS"
\&\fBcwb-split-vrt\fR assumes that a corpus is a collection of individual texts (or other units) delimited by the \s-1XML\s0 tags specified with the \fB\-by\fR option. It reads each text unit into memory, starts a new corpus part if text does not fit into the current one, and then writes the text to the output file.  Any extraneous material before the start tag (e.g. \f(CW\*(C`<text>\*(C'\fR) as well as trailing end tags (after e.g. \f(CW\*(C`</text>\*(C'\fR) are included in the text unit.
.PP
This implementation strategy has two important consequences:
.IP "\(bu" 4
Text units must be sufficiently small so that the Perl script can fit them comfortably into \s-1RAM.\s0 It is probably not a good idea to split e.g. a newspaper collection on yearly volumes.
.IP "\(bu" 4
There must not be any \s-1XML\s0 regions spanning multiple text units. \fBcwb-split-vrt\fR is not aware of such regions and thus cannot replicate the corresponding start and end tags if they are broken across multiple parts. In other words, the \s-1XML\s0 elements specified with \f(CW\*(C`\-by\*(C'\fR must delimit completely independent chunks of the corpus.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2007\-2022 Stephanie Evert [https://purl.org/stephanie.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
