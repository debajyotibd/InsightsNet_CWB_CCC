.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB-ALIGN-IMPORT 1p"
.TH CWB-ALIGN-IMPORT 1p "2023-06-22" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cwb\-align\-import \- Import existing sentence alignment into a CWB corpus
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  cwb\-align\-import [options] <alignment_beads.txt>
.Ve
.PP
Options:
.PP
.Vb 6
\&  \-r <dir>, \-\-registry=<dir>    use registry directory <dir>
\&  \-i, \-\-inverse                 encode inverse alignment (target \-> source)
\&  \-p, \-\-prune                   ignore alignment beads with ID errors
\&  \-e, \-\-empty                   allow 1:0 and 0:1 alignments (not encoded)
\&  \-v, \-\-verbose                 show progress messages during processing
\&  \-h, \-\-help                    display short help page
\&
\&  \-nh, \-\-no\-header              alignment file without header; must specify:
\&  \-l1 <name>, \-\-source=<name>   CWB name of source corpus
\&  \-l2 <name>, \-\-target=<name>   CWB name of target corpus
\&  \-s <att>,   \-\-grid=<att>      alignment grid (s\-attribute, usually sentences)
\&  \-k <spec>,  \-\-key=<spec>      pattern for constructing unique sentence IDs
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is used to import an existing sentence-level alignment between two corpora into the \s-1IMS\s0 Open Corpus Workbench.  Alignments at other granularities (such as paragraph or clause) are also supported, but note that discontinuous regions are not allowed in alignment beads and there can only be \fIone\fR alignment between any two corpora.  For simplicity, this manpage talks about sentence alignment only; adjust the instructions accordingly to import paragraph alignment etc.
.PP
First, the two corpora to be aligned must be CWB-encoded, making sure that all sentence regions (usually marked by an s\-attribute \f(CW\*(C`s\*(C'\fR) carry unique IDs.  For efficiency and convenience, IDs can be constructed from multiple annotations at different levels, e.g. document \s-1ID,\s0 paragraph number (within document) and sentence number (within paragraph).
.PP
The input file for \fBcwb-align-import\fR contains one alignment bead per row, specifying first the \s-1ID\s0(s) of the source language sentence(s) and then the \s-1ID\s0(s) of the target language sentence(s).  The \s-1CWB\s0 names of the source and target corpus, the s\-attribute containing sentence regions, and a pattern for constructing unique IDs are either listed in the header of the input file, or can be specified with command-line arguments.  See \*(L"\s-1INPUT FILE FORMAT\*(R"\s0 below for details on the alignment file format.
.PP
An example illustrating a typical use case can be found in the \fI\s-1CWB\s0 Corpus Encoding Tutorial\fR.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-help, \-h" 4
.IX Item "--help, -h"
Show usage and options summary.
.IP "\-\-verbose, \-v" 4
.IX Item "--verbose, -v"
Verbose mode (shows progress messages during processing).
.IP "\-\-registry=\fIdir\fR, \-r \fIdir\fR" 4
.IX Item "--registry=dir, -r dir"
Locate corpora in \s-1CWB\s0 registry directory \fIdir\fR, overriding the default directory and the environment variable \f(CW\*(C`CORPUS_REGISTRY\*(C'\fR.
.IP "\-\-inverse, \-i" 4
.IX Item "--inverse, -i"
Encode inverse alignment (from \fBtarget\fR language to \fBsource\fR language).
.IP "\-\-prune, \-p" 4
.IX Item "--prune, -p"
Automatically ignore alignment beads if sentence IDs are not found, either in the source or the target corpus.  Without \f(CW\*(C`\-p\*(C'\fR, \fBcwb-align-import\fR will abort with an error message in this case.  Note that the \f(CW\*(C`\-p\*(C'\fR option implies \f(CW\*(C`\-e\*(C'\fR (see below).
.IP "\-\-empty, \-e" 4
.IX Item "--empty, -e"
Allow 1:0 and 0:1 alignment beads, which will be silently ignored (without \f(CW\*(C`\-e\*(C'\fR, they cause a fatal error).
.IP "\-\-no\-header, \-nh" 4
.IX Item "--no-header, -nh"
Alignment file does not contain a header line.  In this case, the header information must be provided on the command line with the \f(CW\*(C`\-l1\*(C'\fR, \f(CW\*(C`\-l2\*(C'\fR, \f(CW\*(C`\-s\*(C'\fR and \f(CW\*(C`\-k\*(C'\fR flags (documented below).
.IP "\-\-source=\fI\s-1ID\s0\fR, \-l1 \fI\s-1ID\s0\fR" 4
.IX Item "--source=ID, -l1 ID"
\&\s-1CWB\s0 corpus \fI\s-1ID\s0\fR of the source language corpus.  Overrides information in alignment file header, if present.
.IP "\-\-target=\fI\s-1ID\s0\fR, \-l2 \fI\s-1ID\s0\fR" 4
.IX Item "--target=ID, -l2 ID"
\&\s-1CWB\s0 corpus \fI\s-1ID\s0\fR of the target language corpus.  Overrides information in alignment file header, if present.
.IP "\-\-grid=\fIattribute\fR, \-s \fIattribute\fR" 4
.IX Item "--grid=attribute, -s attribute"
\&\s-1CWB\s0 \fIattribute\fR used as alignment grid (each alignment bead links \fIn\fR consecutive grid regions in the source language to \fIm\fR consecutive grid regions in the target language).  For the most common case of sentence alignment, the grid \fIattribute\fR will usually be \f(CW\*(C`s\*(C'\fR.  Note that the same attribute name is used for both source and target language corpus.
.IP "\-\-key=\fIpattern\fR, \-k \fIpattern\fR" 4
.IX Item "--key=pattern, -k pattern"
Pattern used to construct unique sentence IDs (must be the same in source and target language).  If sentences are directly annotated with IDs, say in the s\-attribute \f(CW\*(C`s_id\*(C'\fR, you can simply specify \f(CW\*(C`\-k \*(Aq{s_id}\*(Aq\*(C'\fR or \f(CW\*(C`\-k \*(Aq{id}\*(Aq\*(C'\fR for short (the name of the grid attribute is automatically prepended).  Note the curly braces around the attribute name!
.Sp
In more complex situations, \fIpattern\fR is an arbitrary character string that interpolates s\-attributes enclosed in curly braces.  For example, if paragraphs and sentences are numbered (s\-attributes \f(CW\*(C`p_num\*(C'\fR and \f(CW\*(C`s_num\*(C'\fR), you can construct IDs of the form \f(CW\*(C`id_p4_s2\*(C'\fR (second sentence in fourth paragraph) with the key \f(CW\*(C`\-k \*(Aqid_p{p_num}_s{s_num}\*(Aq\*(C'\fR.
.SH "INPUT FILE FORMAT"
.IX Header "INPUT FILE FORMAT"
The alignment file starts with an optional header line. Use the \f(CW\*(C`\-nh\*(C'\fR (\f(CW\*(C`\-\-no\-header\*(C'\fR) flag if your file does not include a header.  In this case you need to specify the necessary information on the command line, using the  \f(CW\*(C`\-l1\*(C'\fR, \f(CW\*(C`\-l2\*(C'\fR, \f(CW\*(C`\-s\*(C'\fR and \f(CW\*(C`\-k\*(C'\fR flags.
.PP
The header specifies the corpora to be aligned, which must already have been CWB-encoded; the name of the s\-attribute containing sentence regions (or other regions used as an alignment grid, such as paragraphs); and finally a key pattern to be used for constructing unique sentence IDs (see below).  The four items must be separated by \s-1TAB\s0 characters.
.PP
In the simplest case, the \s-1ID\s0 key pattern is a string that includes the name of the s\-attribute containing sentence IDs enclosed in curly braces. For instance, if your corpus includes unique sentence numbers
.PP
.Vb 1
\&  <s num="1">
.Ve
.PP
encoded in the standard way (i.e. with \f(CW\*(C`\-S s+num\*(C'\fR), and if sentence IDs are given in the form \f(CW\*(C`id_1\*(C'\fR in the alignment beads file, you have to specify \f(CW\*(C`id_{s_num}\*(C'\fR (or \f(CW\*(C`id_{num}\*(C'\fR for short) as key pattern.  The entire header line might thus look like this:
.PP
.Vb 1
\&   SOURCE_CORPUS     TARGET_CORPUS      s      id_{num}
.Ve
.PP
Each of the remaining lines in the input file corresponds to a single alignment bead.  It consists of the \s-1ID\s0 of a sentence in the source corpus (or multiple IDs separated by blanks), followed by a \s-1TAB\s0 character and the \s-1ID\s0 of the aligned sentence in the target corpus (or multiple IDs separated by blanks).
.PP
As an example, the line
.PP
.Vb 1
\&    id_1 id_2 id_3  <TAB>  id_2 id_3  [ <TAB> ... ]
.Ve
.PP
indicates that the first three sentences of the source corpus are aligned to the second and third sentence of the target corpus.  Further TAB-delimited fields (e.g. specifying the confidence in an alignment bead) are silently ignored.
.PP
Unique sentence IDs can also be constructed from multiple attributes, which is more efficient than storing the unique IDs in a single \s-1CWB\s0 attribute.  The individual components are usually \s-1XML\s0 attributes of the \f(CW\*(C`<s>\*(C'\fR tags, but may also include \s-1XML\s0 attributes of different regions such as text IDs or paragraph numbers.  In the latter case, the full name of the corresponding s\-attribute has to be specified.  For instance, \f(CW\*(C`{text_id}:{num}\*(C'\fR would construct unique IDs from a text \s-1ID\s0 and sentence number, separated by a \f(CW\*(C`:\*(C'\fR character.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2007\-2022 Stephanie Evert [https://purl.org/stephanie.evert]
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
