.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CWB-ALIGN-TMX2BEADS 1p"
.TH CWB-ALIGN-TMX2BEADS 1p "2023-06-22" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cwb\-align\-tmx2beads \- Export existing aligned data from TMX for use with CWB.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  cwb\-align\-tmx2beads [options]
.Ve
.PP
Options:
.PP
.Vb 9
\&  \-i <file>, \-\-tmx\-input=<file>    specify input TMX file (can be used multiple times; required at least once)
\&  \-o <file>, \-\-bead\-output=<file>  specify target file for alignment beads; if absent, data written to STDOUT
\&  \-H, \-\-dummy\-header               include a "dummy" header line at the start of the output, before alignment beads
\&  \-s <ISO>, \-\-source\-lang=<ISO>    ISO 639\-1 or 639\-2 code for the source language (if unspecified, this will be guessed)
\&  \-w, \-\-write\-text                 write monolingual text files with auto\-generated filenames, as well as bead data
\&  \-t <att>, \-\-text\-attribute=<att> name for the s\-attribute to use for each text (defaults to just <text>)
\&  \-g <att>, \-\-grid\-attribute=<att> name for the s\-attribute to use as alignment grid (defaults to <seg>, as in TMX)
\&  \-v, \-\-verbose                    show progress messages during processing
\&  \-h, \-\-help                       display short help page
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a \s-1CWB\s0 support tool which can be used to export parallel corpus data in the \s-1TMX\s0 format to files suitable for use in \s-1CWB.\s0
.PP
\&\s-1TMX\s0 (Translation Memory eXchange) is an XML-based standard for storing aligned bilingual data (or multilingual, but this tool only deals with bilingual right now). As of the time of writing, the \s-1TMX\s0 standard is maintained at <https://www.gala\-global.org/lisa\-oscar\-standards>; documentation with examples can be found here: <https://www.gala\-global.org/tmx\-14b> . Multiple proprietary software packages for aligning parallel corpus data store their results as \s-1TMX.\s0
.PP
However, \s-1TMX\s0 data operates on a very different principle to CWB-indexed corpora. When using \s-1CWB,\s0 a separate corpus is indexed for the source-language corpus and the target-language corpus; then, some structural attribute is used to identify stretches of text which should be linked together between the first and second corpora as aligned; this data is used to create an \fIalignment attribute\fR which indexes those interlinks. In \s-1TMX\s0 format, by contrast, each text in the parallel corpus is stored in a single bilingual \s-1XML\s0 file; the corresponding regions of text are placed adjacent to one another within a grouping \s-1XML\s0 element. In other words, a \s-1TMX\s0 file consists of alternating chunks in the two languages.
.PP
\&\fBcwb\-align\-tmx2beads\fR is designed to take a set of \s-1TMX\s0 files and to generate a file re-expressing the alignment information in a form that \s-1CWB\s0 can use (specifically, \fBcwb-align-import\fR) to generate the necessary a\-attribute(s) \- a format that encodes what in \s-1CWB\s0 terms are called \fIalignment beads\fR. \fBcwb\-align\-tmx2beads\fR can also (optionally, but normally you would want to) create a pair of text files for each original \s-1TMX\s0 file, where the two files contain the source and the target language  text separately; the separated-out source language data and target language data can be then tagged or tokenised and ultimately indexed as \s-1CWB\s0 corpora.
.PP
The output, printed to \s-1STDOUT\s0 by default, is designed to generate an input file for \fBcwb-align-import\fR: it contains one alignment bead per row, specifying first the \s-1ID\s0(s) of the source language region(s) and then the \s-1ID\s0(s) of the target language region(s). A full header row is \fBnot\fR included in the output; a \*(L"dummy\*(R" header can be included with the \f(CW\*(C`\-H\*(C'\fR option, but this contains placeholders which the user must replace manually before using the data. See \*(L"\s-1OUTPUT FILE FORMAT\*(R"\s0 below.
.PP
An example illustrating a typical use case can be found in the \fI\s-1CWB\s0 Corpus Encoding Tutorial\fR. (\s-1NB\s0 \- this is a \fB\s-1TODO\s0\fR!)
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-help, \-h" 4
.IX Item "--help, -h"
Show usage and options summary.
.IP "\-\-verbose, \-v" 4
.IX Item "--verbose, -v"
Verbose mode (shows progress messages during processing).
.IP "\-\-tmx\-input=\fIfile\fR, \-i \fIfile\fR" 4
.IX Item "--tmx-input=file, -i file"
Input filename: path to a \s-1TMX\s0 data file to process. This must be specified at least once, but can be specified any number of times.
.IP "\-\-bead\-output=\fIfile\fR, \-o \fIfile\fR" 4
.IX Item "--bead-output=file, -o file"
Output filename: if specified, the alignment data will be written to the file in question, otherwise it will be piped to \s-1STDOUT.\s0 See  \*(L"\s-1OUTPUT FILE FORMAT\*(R"\s0 for its format. The conventional file extension is \f(CW\*(C`.align\*(C'\fR.
.IP "\-\-dummy\-header, \-H" 4
.IX Item "--dummy-header, -H"
Cause output to begin with a \*(L"dummy\*(R" header line; see \*(L"\s-1OUTPUT FILE FORMAT\*(R"\s0 for more details. By default, the output contains no header line \- just the sequence of lines representing alignment beads.
.IP "\-\-source\-lang=\fI\s-1ISO\s0\fR, \-s \fI\s-1ISO\s0\fR" 4
.IX Item "--source-lang=ISO, -s ISO"
Specify the source language. Languages need to be declared using \s-1ISO\-639\s0 codes, either the two or three-letter version (but it must match what is in the \s-1TMX\s0 file(s)). It's best always to specify this, but if you don't, \fBcwb\-align\-tmx2beads\fR will try to guess from the content of your \s-1TMX\s0 files.
.Sp
The language codes are case-insensitive; \f(CW\*(C`EN\*(C'\fR and \f(CW\*(C`en\*(C'\fR would have exactly the same effect.
.IP "\-\-write\-text, \-w" 4
.IX Item "--write-text, -w"
Write monolingual files containing the original text.
.Sp
If this flag is present, then for each input file, a pair of text files will be generated in the current working directory (their names distinguished by the \s-1ISO\-639\s0 language codes); while the files are text/XML as produced, they can be tokenised and optionally tagged separately, in order to produce indexable \f(CW\*(C`.vrt\*(C'\fR files for \s-1CWB\s0 corpus creation; they contain \s-1XML\s0 \f(CW\*(C`seg\*(C'\fR elements with identifier attributes (\f(CW\*(C`id\*(C'\fR) that correspond to those in the alignment bead file; the root element is \f(CW\*(C`text\*(C'\fR (or specify otherwise with \f(CW\*(C`\-t\*(C'\fR), and has an \f(CW\*(C`id\*(C'\fR attribute which is derived from the \s-1TMX\s0 filename.
.Sp
If you intend to retain the auto-generated text \s-1ID\s0 attribute as the eventual \s-1CWB\s0 IDs for the texts, be aware that to be compatible with CQPweb, the part of the filenames that is incorporated into the text IDs should include only unaccented Latin letters, the digits 0 to 9, and the underscore character.
.IP "\-\-text\-attribute=\fIattribute\fR, \-t \fIattribute\fR" 4
.IX Item "--text-attribute=attribute, -t attribute"
Specify name for the text-level \s-1XML\s0 element (\s-1CWB\s0 structural attribute).
.Sp
The files created with \f(CW\*(C`\-w\*(C'\fR or \f(CW\*(C`\-\-write\-text\*(C'\fR are, by default,  of the following overall form:
.Sp
.Vb 3
\&   <text id="myfile_en">
\&      ... segments representing translation units here ...
\&   </text>
.Ve
.Sp
If you want a different root element, you can use this option to set it. It must be a valid \s-1CWB\s0 identifier (and you should make sure it is preserved, along with its \s-1ID,\s0 when you tokenise and/or tag and/or index the corpus files).
.IP "\-\-grid\-attribute=\fIattribute\fR, \-g \fIattribute\fR" 4
.IX Item "--grid-attribute=attribute, -g attribute"
Specify the grid attribute to use in text files.
.Sp
Alignment data in \s-1CWB\s0 relies on a single \fIstructural attribute\fR (represented in input text as a set of nonempty instances of the attribute's namesake \s-1XML\s0 element) used as the alignment grid. This s\-attribute must have the same name in both the source and target language corpora; each alignment bead links \fIn\fR consecutive grid regions in the source language to \fIm\fR consecutive grid regions in the target language.
.Sp
Traditionally, the typical grid attribute is \f(CW\*(C`s\*(C'\fR  (for sentence alignment). In \s-1TMX,\s0 however, aligned elements are contained within \f(CW\*(C`<seg>...</seg>\*(C'\fR. By default, text files produced using the \f(CW\*(C`\-w\*(C'\fR / \f(CW\*(C`\-\-write\-text\*(C'\fR flag preserve the \f(CW\*(C`<seg>\*(C'\fR tags from the \s-1TMX\s0 data. However, you can use the \f(CW\*(C`\-g\*(C'\fR option to specify an alternative name for the grid attribute. For instance, if you specify \f(CW\*(C`\-\-grid=alignedChunk\*(C'\fR then the output files will contain lines like this:
.Sp
.Vb 1
\&   <alignedChunk id="myfile_en34">I visit London. Then I visit Paris.</alignedChunk>
\&
\&      ... and in the corresponding target\-language file ...
\&
\&   <alignedChunk id="myfile_fr32">Je visite Londres et puis je visite Paris.</alignedChunk>
.Ve
.Sp
instead of forms like this:
.Sp
.Vb 1
\&   <seg id="myfile_en34">I visit London. Then I visit Paris.</seg>
\&
\&   <seg id="myfile_fr32">Je visite Londres et puis je visite Paris.</seg>
.Ve
.Sp
These \s-1XML\s0 elements (whether \f(CW\*(C`<seg> ... </seg>\*(C'\fR or anything else) elements must be preserved, along with their IDs, when you tokenise and/or tag and/or index the corpus files; if not, then \s-1CWB\s0 will not be able to anchor the alignment data to the actual text.
.SH "INPUT FILE FORMAT"
.IX Header "INPUT FILE FORMAT"
This program deals with one frequently-seen variant of the \s-1TMX\s0 format (\*(L"Translation Memory eXchange\*(R"). \s-1TMX\s0 is an XML-based language; it contains a sequence of \s-1XML\s0 elements that represent \fIcorrespondence units\fR. Every such unit contains a segment of text in each of both the source and target language, such that the target-language segment is what has been identified as the translation of the source language segment. That is, it aligns regions of the source and target texts by \fIplacing them adjacently\fR in the structure of the \s-1TMX XML\s0 tree.
.PP
The \s-1TMX\s0 format will not be explained further here. The \s-1TMX\s0 standard is, as of this writing, online at <https://www.gala\-global.org/lisa\-oscar\-standards> ; documentation with examples can be found here: <https://www.gala\-global.org/tmx\-14b>; several versions of the \s-1TMX DTD\s0 exist, of which the most recent seems to be 1.5 circa 2011, downloadable here: <https://sourceforge.net/projects/tmx/files/>.
.SH "OUTPUT FILE FORMAT"
.IX Header "OUTPUT FILE FORMAT"
The output from this tool is designed to be used as input for \fBcwb-align-import\fR. It therefore follows the format described in the manual page for \fBcwb-align-import\fR, but without using the more advanced features described there. In particular, \fBcwb\-align\-tmx2beads\fR cannot generate a full header row for its output \- because the header must specify the source and target corpora, which is information that \fBcwb\-align\-tmx2beads\fR does not have. There are two ways that \fBcwb\-align\-tmx2beads\fR can deal with this. By default, the header row is omitted completely. In this case, it is necessary to use \fBcwb-align-import\fR options to specify the information that would otherwise have been in the header line.
.PP
Alternatively, if the \f(CW\*(C`\-H\*(C'\fR / \f(CW\*(C`\-\-dummy\-header\*(C'\fR flag is set, a \*(L"dummy\*(R" header line, that is one that has placeholders (of the form \f(CW\*(C`DUMMY_SourceLangCorpusCwbName\*(C'\fR for the \s-1CWB\s0 names of the two corpora, will be written before the rest of the output; you then need only adjust the placeholders to the correct corpus names and the file will be ready to use with \fBcwb-align-import\fR.
.PP
Without \f(CW\*(C`\-H\*(C'\fR, you can manually add a header line later, in the following form:
.PP
.Vb 1
\&   SOURCE_CORPUS     TARGET_CORPUS      s      {s_id}
.Ve
.PP
\&...  with the appropriate grid attribute in place of \f(CW\*(C`s\*(C'\fR.
.PP
Each of the remaining lines in the output corresponds to a single alignment bead (that is, a single \f(CW\*(C`<tuv>\*(C'\fR element in the \s-1TMX\s0).  It consists of the \s-1ID\s0 of a region of the grid attribute in the source corpus, followed by a \s-1TAB\s0 character, and then the \s-1ID\s0 of the aligned grid region in the target corpus. For example, an output line might look like this:
.PP
.Vb 1
\&    mytext_en1 mytext_en2  <TAB>  mytext_fr4
.Ve
.PP
This indicates that the source corpus translation segments with IDs \f(CW\*(C`mytext_en1\*(C'\fR and \f(CW\*(C`mytext_en2\*(C'\fR are aligned to the target corpus translation segment with \s-1ID\s0 \e\f(CW\*(C`mytext_fr4\*(C'\fR (where both originate from the file \fBmyfile.tmx\fR). The IDs are created automatically, and appear in the text files created when the \f(CW\*(C`\-w\*(C'\fR / \f(CW\*(C`\-\-write\-text\*(C'\fR flag is set.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The manual for \fBcwb-align-import\fR goes into much more detail on the format of the output file (\f(CW\*(C`man cwb\-align\-import\*(C'\fR).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2018\-2022 Corpus Workbench contributors (see file \fI\s-1AUTHORS\s0\fR)
.PP
This software is provided \s-1AS IS\s0 and the author makes no warranty as to
its use and performance. You may use the software, redistribute and
modify it under the same terms as Perl itself.
